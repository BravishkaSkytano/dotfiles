#!/usr/bin/env bash

# determine where to place the log file
logfile="$HOME/.dkrc.log"
[ -d "$HOME/.local/share/xorg" ] && logfile="$HOME/.local/share/xorg/dkrc.log"
: > "$logfile"

# Autostart
# First terminate already running processes
processes=("polybar" "sxhkd" "dunst")

for process in "${processes[@]}"; do
	if pgrep -f "$process"; then
		pkill -9 -f "$process" > /dev/null; sleep 0.1
	fi
done

sxhkd -c "$HOME/.config/dk/sxhkdrc" &

#"$HOME"/.config/polybar/launch.sh
echo "---" | tee -a /tmp/polybar_hack-top.log /tmp/polybar_hack-bottom.log
#polybar main 2>&1 | tee -a /tmp/polybar.log & disown
#polybar main -c ~/.config/polybar/docky/config.ini 2>&1 | tee -a /tmp/polybar_docky.log & disown
polybar top -c ~/.config/polybar/hack/config.ini 2>&1 || tee -a /tmp/polybar_hack-top.log & disown
polybar bottom -c ~/.config/polybar/hack/config.ini 2>&1 || tee -a /tmp/polybar_hack-bottom.log & disown

dunst &
pidof -q picom || { picom & }
pidof -q pipewire || { pipewire & }
pidof -q xfce4-power-manager || { xfce4-power-manager & }
pidof -q syncthing || { syncthing & }
pidof -q redshift || { redshift & }

"$HOME"/scripts/pywal.sh
. "$HOME"/.cache/wal/colors.sh

# spawn a scratchpad terminal if not already (see sxhkdrc and rules for bind and setup)
# if ! pgrep -f "st -c scratchpad" >/dev/null 2>&1; then
# 	st -c scratchpad &
# fi

# adjust border widths based on the DPI of the monitor
px=$(xrandr | grep ' connected' | tail -n1 | grep -o '[0-9]\+x[0-9]\+' | cut -d'x' -f2)
mm=$(xrandr | grep ' connected' | tail -n1 | grep -o '[0-9]\+mm' | tail -n1 | sed 's/mm//')
dpi=$(( (px / mm) * 25 ))

if [ $dpi -ge 140 ]; then
	border_width=4
	border_outer_width=2
elif [ $dpi -ge 120 ]; then
	border_width=3
	border_outer_width=1
else
	border_width=1
	border_outer_width=1
fi

{ # compound command to redirect all output

	# workspace settings
	# ------------------------

	# initialize 6 workspaces (1-6) (default: 1/monitor)
	dkcmd set numws=6

	# default workspace '_' values used when allocating new workspaces
	# can be applied to all existing workspaces when passed 'apply' after ws=_
	dkcmd set ws=_ apply layout=tile master=1 stack=3 gap=3 msplit=0.5 ssplit=0.5

	# use grid layout, padding, and gaps on last workspace
	dkcmd set ws=6 layout=grid pad left=200 right=200 top=100 bottom=100 gap=50

	# change workspace names (default: number == name)
	dkcmd set \
		ws=1  name="1" \
		ws=2  name="2" \
	 	ws=3  name="3" \
	 	ws=4  name="4" \
	 	ws=5  name="5" \
	 	ws=6  name="6" \

	# enable static workspaces and assign them to monitors (only relevant for multiple monitors)
	# aside -
	#       many that come from other workspace models tried dk and requested this feature
	#       try embracing the default behaviour and allow access to any workspace from any monitor
	#       you might end up liking it :)
	#
	# mon1='DisplayPort-0'
	# mon2='HDMI-A-0'
	# dkcmd set static_ws=true \
	# 	ws=1  mon=$mon1 \
	# 	ws=2  mon=$mon1 \
	# 	ws=3  mon=$mon1 \
	# 	ws=4  mon=$mon2 \
	# 	ws=5  mon=$mon2 \
	# 	ws=6  mon=$mon2 \


	# global settings
	# ---------------------

	# focus windows when receiving activation and enable focus-follows-mouse
	dkcmd set focus_open=true focus_urgent=true focus_mouse=true

	# place clients at the tail and ignore size hints on tiled windows
	dkcmd set tile_tohead=0 tile_hints=false

	# minimum width/height for resizing, and minimum allowed on-screen when moving
	dkcmd set win_minwh=50 win_minxy=10

	# disable gaps and borders in single window layouts
	dkcmd set smart_gap=true smart_border=true

	# define mouse mod and move/resize buttons
	dkcmd set mouse mod=alt move=button1 resize=button3

	# obey motif border hints on windows that draw their own (steam, easyeffects, etc.)
	dkcmd set obey_motif=true


	# borders
	# ---------

	# traditional
	# set border width and colour for each window state
	# dkcmd set border width=$border_width colour focus='#6699cc' unfocus='#000000' urgent='#ee5555'

	# alternative
	# enable split borders and colours, width is overall width, outer_width consumes some of width.
	# outer_width must be less than width, outer_width of 0 will be single borders
	dkcmd set border width=$border_width outer_width=$border_outer_width \
		colour \
		focus="$color15" \
		unfocus="$color2" \
		urgent="$color1" \
		outer_focus="$color15" \
		outer_unfocus="$color2" \
		outer_urgent="$color1" \
		#outer_focus='#222222' \
		#outer_unfocus='#222222' \
		#outer_urgent='#222222'


	# window rules
	# --------------

	# rule class, instance, and title regexes (*ALWAYS* CASE INSENSITIVE)

	# open window(s) on a specific workspace (assigned monitor)
	dkcmd rule class="^vivaldi-stable$" ws=2
	dkcmd rule class="^Zettlr$" ws=3

	# open window(s) on a monitor by number or name (active workspace on monitor)
	# dkcmd rule class="^chromium$" mon="HDMI-A-0"

	# open window(s) and use a callback function (user defined in config.h)
	# we also ignore_cfg=true to stop the window from being resized on it's own from events
	# eg. mpv --x11-name=albumart /path/to/media
	# dkcmd rule class="^mpv$" instance="^albumart$" float=true ignore_cfg=true callback=albumart bw=0

	# open window(s) in a floating state
	dkcmd rule class="^(pavucontrol|transmission-gtk|steam|lxappearance|Syncthing-GTK)$" float=true

	# open window(s) with a specific geometry and coordinates (floating only!)
	# dkcmd rule class="^google-chrome$" title="^open files$" float=true w=1280 h=720

	# open window(s) with ignore_msg=true to avoid focus being grabbed and changing workspace
	# dkcmd rule class="^TelegramDesktop$" ignore_msg=true

	# define some terminals and allow them to be absorbed by spawned windows
	dkcmd rule class="^(st|st-256color|urxvt|kitty|alacritty|xterm|xterm-256colors)$" terminal=true

	# set a window to never absorb other windows, like the xev event tester
	dkcmd rule title="^Event Tester$" no_absorb=true

	# send a window to the scratchpad
	dkcmd rule class="^scratchpad$" scratch=true

	# focus window and workspace on opening
	# dkcmd rule class="^firefox$" ws=1 focus=true

	# update or remove an existing rule with the same match patterns
	# dkcmd rule class="^firefox$" mon="HDMI-A-0"
	# dkcmd rule remove class="^firefox$"

	# apply current rule set to all existing windows (used mainly for WM restart)
	dkcmd rule apply '*'

	# delete all rules
	# dkcmd rule remove '*'

} >> "$logfile" 2>&1 # append responses

# inform of any errors in a notification
if grep -q 'error:' "$logfile"; then
	hash notify-send && notify-send -t 0 -u critical "dkrc has errors" \
		"$(awk '/error:/ {sub(/^error: /, ""); gsub(/</, "\<"); print}' "$logfile")"
	exit 1
fi

exit 0
